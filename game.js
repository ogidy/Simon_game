

'use strict'; // Enforce strict mode for better error checking



// Array holding the possible button colors
const buttonColours = ["red", "blue", "green", "yellow"];

// Sequence generated by the game
let gamePattern = [];

// Sequence of colors clicked by the user
let userClickedPattern = [];

// Flag to track if the game has started
let gameStarted = false;

// Current level of the game
let level = 0;




// Start the game when any key is pressed
$(document).on("keypress", function () {
    if (!gameStarted) {
        gameStarted = true;
        nextSequence(); // Begin the first sequence
    }
});



/**
 * Generates the next color in the sequence and updates the UI.
 */
function nextSequence() {
    level++; // Increase level
    $("#level-title").text(`Level ${level}`); // Update level display
    const randomNumber = Math.floor(Math.random() * buttonColours.length); // Pick a random color
    const randomChosenColour = buttonColours[randomNumber];
    gamePattern.push(randomChosenColour); // Add to game sequence

    // Animate the chosen button
    $(`#${randomChosenColour}`).fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);
}




// Handle user button clicks
$(".btn").on("click", function () {
    const userChosenColour = $(this).attr("id"); // Get color of clicked button
    userClickedPattern.push(userChosenColour); // Add to user's sequence
    playSound(userChosenColour); // Play sound for button
    animatePress(userChosenColour); // Animate button press
    checkAnswer(userClickedPattern.length - 1); // Check user's answer
});



/**
 * Play the sound for a given color.
 * @param {string} name - The color name.
 */
function playSound(name) {
    const sound = new Audio(`./sounds/${name}.mp3`);
    sound.play();
}



/**
 * Animate the button press effect.
 * @param {string} currentColour - The color to animate.
 */
function animatePress(currentColour) {
    $(`#${currentColour}`).addClass("pressed");
    setTimeout(function () {
        $(`#${currentColour}`).removeClass("pressed");
    }, 100);
}



/**
 * Reset game variables to start over.
 */
function startOver() {
    level = 0;
    gamePattern = [];
    gameStarted = false;
    userClickedPattern = [];
}



/**
 * Check if user's answer is correct and handle game logic.
 * @param {number} currentLevel - The index of the user's latest input.
 */
function checkAnswer(currentLevel) {
    // If the user's latest click matches the game sequence
    if (userClickedPattern[currentLevel] === gamePattern[currentLevel]) {
        console.log("success");
        // If user finished the current sequence
        if (userClickedPattern.length === gamePattern.length) {
            setTimeout(function () {
                nextSequence(); // Move to next level
                userClickedPattern = []; // Reset user pattern
            }, 1000);
        }
    } else {
        // If user made a mistake
        console.log("wrong");
        playSound("wrong"); // Play wrong sound
        $("body").addClass("game-over"); // Show game over effect
        setTimeout(function () {
            $("body").removeClass("game-over");
        }, 200);
        $("#level-title").text("Game Over! Press Any Key to Restart"); // Update title
        startOver(); // Reset game
    }
}